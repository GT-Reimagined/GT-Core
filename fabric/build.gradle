plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
}
archivesBaseName = "${rootProject.archive_base_name}-fabric"


def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/gtcore.accesswidener")


loom {
    accessWidenerPath = accessWidenerFile
    mixin {
        defaultRefmapName = "gtcore.refmap.json"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.mappings_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    implementation(project(path: ":common"))
    modImplementation("io.github.gregtechintergalactical:antimatter-fabric:${antimatter_version}"){
        exclude(group: "maven.modrinth")
        exclude(group: "TechReborn")
        exclude(group: "com.github.Trins-mods")
        exclude(group: "com.github.Trinsdar")
    }
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable")){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    modImplementation(include("com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version_fabric}"))
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    modImplementation "maven.modrinth:carbon-config:${project.carbon_config_fabric_version}"
}

task copyAccessWidener(type: Copy) {
    from accessWidenerFile
    into generatedResources
}

sourceSets {
    main {
        resources {
            srcDir copyAccessWidener
        }
    }
}

processResources {
    from project(":common").sourceSets.main.resources
    dependsOn copyAccessWidener
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(':common').sourceSets.main.allSource) {
        exclude("gtcore.accesswidener") // duplicate on fabric, unneeded on forge
    }
}
