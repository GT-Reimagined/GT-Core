archivesBaseName = "${rootProject.archive_base_name}-fabric"
version = "${project.mod_version}-${rootProject.minecraft_version}"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").file("src/main/resources/gtcore.accesswidener")
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":common", configuration: "namedElements"))
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric"))
    modImplementation("io.github.gregtechintergalactical:antimatter-fabric:${antimatter_version}"){
        exclude(group: "maven.modrinth")
        exclude(group: "TechReborn")
    }
    modImplementation(include("com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version_fabric}"))
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
