archivesBaseName = "${rootProject.archive_base_name}-fabric"
version = "${project.mod_version}-${rootProject.minecraft_version}"

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/gtcore.accesswidener")

/*loom {
    accessWidenerPath = accessWidenerFile
}*/
unimined.minecraft {
    fabric {
        loader fabric_loader_version
        accessWidener(accessWidenerFile)
    }

    defaultRemapJar = true
}

dependencies {
    //modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    implementation(project(path: ":common"))
    //shadowCommon(project(path: ":common", configuration: "transformProductionFabric"))
    modImplementation("io.github.gregtechintergalactical:antimatter-fabric:${antimatter_version}"){
        exclude(group: "maven.modrinth")
        exclude(group: "TechReborn")
        exclude(group: "com.github.Trins-mods")
        exclude(group: "com.github.Trinsdar")
    }
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable")){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    modImplementation(include("com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_version_fabric}"))
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    modImplementation "maven.modrinth:carbon-config:${project.carbon_config_fabric_version}"
}

task copyAccessWidener(type: Copy) {
    from accessWidenerFile
    into generatedResources
}

sourceSets {
    main {
        resources {
            srcDir copyAccessWidener
        }
    }
}

processResources {
    dependsOn copyAccessWidener
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

sourcesJar {
    from(project(':common').sourceSets.main.allSource) {
        exclude("gtcore.accesswidener") // duplicate on fabric, unneeded on forge
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
