import org.gradle.api.tasks.bundling.Jar

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

archivesBaseName = "${rootProject.archive_base_name}-forge"

minecraft {
    // Change to your preferred mappings
    mappings channel: "parchment", version: "${rootProject.mappings_version}-${rootProject.minecraft_version}"
    // Add your AccessTransformer
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "gtcore.refmap.json"
    config "gtcore.mixins.json"
    config "gtcore.jei.mixins.json"
    debug.verbose = true
    debug.export = true
}
jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("io.github.gregtechintergalactical:antimatter-forge:${antimatter_version}")
    implementation fg.deobf("io.github.gregtechintergalactical:tesseract-forge:${tesseract_version}"){
        exclude(group: "maven.modrinth")
    }
    //modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")
    compileOnly fg.deobf("curse.maven:terrafirmacraft-302973:4723717")
    implementation fg.deobf("earth.terrarium:botarium-forge-1.18.2:${project.botarium_version}")
    implementation fg.deobf("com.teamresourceful.resourcefullib:resourcefullib-forge-1.18.2:${project.resourcefullib_version}")
    implementation fg.deobf("io.github.reforgedmods.terraform-api:terraform-wood-api-v1:${project.terraform_version_forge}")
    jarJar("io.github.reforgedmods.terraform-api:terraform-wood-api-v1:${project.terraform_version_forge}"){
        jarJar.ranged(it, "[3.1.5,)")
    }
    //modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    implementation fg.deobf("maven.modrinth:carbon-config:${project.carbon_config_forge_version}")
    runtimeOnly fg.deobf("curse.maven:the-twilight-forest-227639:4337390")
    implementation("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
    implementation fg.deobf("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    implementation fg.deobf("curse.maven:the-one-probe-245211:3965693")
    implementation fg.deobf("com.gtnewhorizon.structurelib:structurelib-forge:${project.structurelib_version}-${project.minecraft_version}")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")
}


tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.mod_version

    exclude("gtcore.accesswidener")
    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}

sourcesJar {
    from(project(':common').sourceSets.main.allSource)
}

tasks.named('jarJar', Jar).configure {
    archiveClassifier.set("")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "Trinsdar",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "Trinsdar",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
    archiveClassifier.set "thin"
}

publishing {
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "gtcore-" + project.name
            from components.java
            jarJar.component(it)
        }
    }
    repositories {
        def isCI = System.getenv("GITHUB_ACTION")
        def isRELEASE = System.getenv("GITHUB_RELEASE")
        if (isCI && isRELEASE) {
            maven {
                url = "https://repo.repsy.io/mvn/trinsdar/gregtech-intergalactical/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        } else {
            mavenLocal()
        }
    }
